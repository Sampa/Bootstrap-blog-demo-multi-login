<?php

/**
 * This is the model base class for the table "{{user}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "User".
 *
 * Columns in table "{{user}}" available as properties of the model,
 * and there are no model relations.
 *
 * @property integer $id
 * @property string $username
 * @property string $password
 * @property string $email
 * @property string $created
 * @property string $last_activity
 * @property string $avatar
 * @property string $presentation
 * @property integer $public_library
 * @property string $facebook
 * @property integer $reputation
 * @property string $persona
 *
 */
abstract class BaseUser extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{user}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'User|Users', $n);
	}

	public static function representingColumn() {
		return 'username';
	}

	public function rules() {
		return array(
			array('username, password, email, created, presentation, facebook, persona', 'required'),
			array('public_library, reputation', 'numerical', 'integerOnly'=>true),
			array('username, password, email', 'length', 'max'=>128),
			array('avatar, persona', 'length', 'max'=>255),
			array('facebook', 'length', 'max'=>50),
			array('last_activity', 'safe'),
			array('last_activity, avatar, public_library, reputation', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, username, password, email, created, last_activity, avatar, presentation, public_library, facebook, reputation, persona', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'username' => Yii::t('app', 'Username'),
			'password' => Yii::t('app', 'Password'),
			'email' => Yii::t('app', 'Email'),
			'created' => Yii::t('app', 'Created'),
			'last_activity' => Yii::t('app', 'Last Activity'),
			'avatar' => Yii::t('app', 'Avatar'),
			'presentation' => Yii::t('app', 'Presentation'),
			'public_library' => Yii::t('app', 'Public Library'),
			'facebook' => Yii::t('app', 'Facebook'),
			'reputation' => Yii::t('app', 'Reputation'),
			'persona' => Yii::t('app', 'Persona'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('username', $this->username, true);
		$criteria->compare('password', $this->password, true);
		$criteria->compare('email', $this->email, true);
		$criteria->compare('created', $this->created, true);
		$criteria->compare('last_activity', $this->last_activity, true);
		$criteria->compare('avatar', $this->avatar, true);
		$criteria->compare('presentation', $this->presentation, true);
		$criteria->compare('public_library', $this->public_library);
		$criteria->compare('facebook', $this->facebook, true);
		$criteria->compare('reputation', $this->reputation);
		$criteria->compare('persona', $this->persona, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}